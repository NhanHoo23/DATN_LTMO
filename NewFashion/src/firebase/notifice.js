// import messaging from '@react-native-firebase/messaging';
// --> API c≈© d·∫°ng namespaced s·∫Ω b·ªã lo·∫°i b·ªè trong b·∫£n ch√≠nh ti·∫øp theo (v22).

import {
  getMessaging,
  requestPermission,
  getToken,
} from '@react-native-firebase/messaging';
// modular API t∆∞∆°ng th√≠ch v·ªõi RN Firebase v22+.

import AsyncStorage from '@react-native-async-storage/async-storage';
import axios from '../service/axios';
import notifee, {AndroidImportance} from '@notifee/react-native';

// H√†m t·∫°o k√™nh th√¥ng b√°o
export async function createNotificationChannel() {
  const channelId = 'default'; // ID c·ªßa k√™nh th√¥ng b√°o

  // Ki·ªÉm tra xem k√™nh ƒë√£ t·ªìn t·∫°i hay ch∆∞a
  const channels = await notifee.getChannels();
  console.log(channels);
  if (channels.some(channel => channel.id === channelId)) {
    return; // N·∫øu k√™nh ƒë√£ t·ªìn t·∫°i, kh√¥ng c·∫ßn t·∫°o l·∫°i
  }

  // T·∫°o k√™nh th√¥ng b√°o m·ªõi
  await notifee.createChannel({
    id: channelId, // ID k√™nh th√¥ng b√°o
    name: 'Default Channel', // T√™n k√™nh
    importance: AndroidImportance.HIGH, // ƒê·ªô quan tr·ªçng c·ªßa th√¥ng b√°o
    sound: 'default',
  });
}

export async function requestUserPermission() {
  try {
    // Y√™u c·∫ßu quy·ªÅn th√¥ng b√°o t·ª´ notifee
    const settings = await notifee.requestPermission();

    if (settings.authorizationStatus >= 1) {
      console.log('‚úÖ Notifee Permission granted');
      // Sau khi c√≥ quy·ªÅn t·ª´ notifee, y√™u c·∫ßu quy·ªÅn FCM v√† l·∫•y token
      await requestFCMToken();
    } else {
      console.log('‚ùå Notifee Permission denied');
    }
  } catch (error) {
    // console.error('‚ùå Error while requesting permission:', error);
    console.log('‚ùå Error while requesting permission:', error);
  }
}
export async function requestFCMToken() {
  const messaging = getMessaging();
  const authStatus = await requestPermission(messaging);

  // ƒê·ª´ng d√πng messaging.AuthorizationStatus.AUTHORIZED
  // v√¨ n√≥ kh√¥ng t∆∞∆°ng th√≠ch v·ªõi RN Firebase v22+
  // ƒê√£ ƒë∆∞·ª£c thay th·∫ø b·∫±ng requestPermission(messaging) v√† authStatus
  // l√† m·ªôt s·ªë nguy√™n t·ª´ 0 ƒë·∫øn 3
  // 0: UNDETERMINED (Ch∆∞a x√°c ƒë·ªãnh)
  // 1: DENIED (B·ªã t·ª´ ch·ªëi)
  // 2: AUTHORIZED (ƒê∆∞·ª£c c·∫•p ph√©p)
  // 3: PROVISIONAL (T·∫°m th·ªùi)

  if (authStatus >= 1) {
    console.log('‚úÖ FCM Permission granted!');
    await getAndSendFCMToken();
  } else {
    console.log('‚ùå FCM Permission denied');
  }
}

export async function getAndSendFCMToken() {
  try {
    const messaging = getMessaging();
    const token = await getToken(messaging);
    const savedToken = await AsyncStorage.getItem('fcmToken');

    if (token && token !== savedToken) {
      console.log('üì§ Sending new FCM token to backend:', token);
      await axios.post('/users/saveDevice', {
        token: token,
      });

      await AsyncStorage.setItem('fcmToken', token);
    } else {
      console.log('‚úÖ Token unchanged, not sending again');
    }
  } catch (error) {
    // console.error('‚ùå Error while sending FCM token:', error);
    console.log('‚ùå Error while sending FCM token:', error);
  }
}
